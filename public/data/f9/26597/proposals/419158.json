{"id": 419158, "author": "sebastiengllmt", "title": "Rust SDK fix critical CBOR encoding", "url": "https://cardano.ideascale.com/a/dtd/419158-48088", "category": 26597, "amount": 50000, "description": "Cardano uses a encoding scheme called CBOR that supports multiple ways of encoding the same data. No Rust library supports all possible encodings of data which has caused multiple critical issues", "f6_no_assessments": 6, "f6_rating": 4.5, "videos": [], "media": [], "f6_assessments": [{"id": 678, "q0": "The proposal targets to fix critical limitations with respect to CBOR (Concise binary object representation) encoding that could result in variable number of bytes (with same value) in different data types mappings, for instance mapping Cardano CBOR data types to Rust Data types. Since, this has led to a lot of error prone code, it clearly is very tough to maintain as these mappings need to be handled manually by developers. \n\nThis proposal wants to enhance the codegen library that will automatically handle these variations and generate the correct code, taking away pain points from dApp developers and making sure that the encodings actually work as expected.  Therefore, it will significantly improve developers experience and have an open source solution (code gen library is already open source), fulfills the challenge settings goals. \n\nAdditionally, it would have been nice to also include KPI metrics and alignment with challenge settings. Nevertheless, being a IOT/low level programmer myself I know how critical this issue is to fix, Hence, I strongly agree.\n", "q0r": 5, "q1": "The team is from dcSpark and have posted links to the repositories on which this proposal will be implemented upon. As a developer myself, I can see that github PRs/Issues have quite a lot of activities, and work is already in progress.\n\nThe plan is to finish v1 by Q3 and then start updating it in existing tools that suffer with this problem. Clearly, this is not limited to existing tools but also be useful for future proposals that would need the codegen library.\n\nThe budget details could have been written a bit better, I understand that a Rust developer is already working on this, and therefore more details could have been provided about how many man hours have been already spent, and how this figure of $50000 reached, The more details there are, the better it is. \n\nThe risk section clearly mentions that 100% automatic generation may not be possible as there is always a chance of some variations that are not supported, and such limitations are already documented and will be updated in the documentation. However, as an open source project, I see this as no issue, as in future it will keep updating and therefore, improve the percentage closer to 100%. Overall a critical proposal, but with some improvements on the write up, hence I can only agree.\n", "q1r": 4, "q2": "I have no concerns with respect to the success of this proposal, as mentioned here in the write up, that usage of the Rust code generated by this tool in various existing tools/libraries/dApp projects.\n\nHowever, the measuring progress of this proposal could have been written better. The write up here is quite lazy, that they will just implement v1 of codegen logic and then implement and release it as part of Cardano Rust SDK. It is obvious that this project is open source, and community can always go to Github activities to check the current progress, but this should have been mentioned in the write up here, also may be a project jira/mira/github activities board (Kanban) could have been mentioned to give some idea to the non technical community members. Therefore, I can only agree that information provided is sufficient to audit the progress and the success of this proposal.\n", "q2r": 4, "assessor": "z_assessor_2114", "no_vca": 9, "ne": 2, "ng": 7, "nfo": 0, "vca_o": 1}, {"id": 955, "q0": "Sebastien Guillemot & dcSpark as a company, the team behind this proposal, have constantly demonstrated that they are core contributors to the developer tools used by most developers working on Cardano.\n\nThis project aims to further develop and correct errors in a key infrastructure project on Cardano, the base layer of the Rust SDK.  As the proposers correctly point out, a lot of other dev teams rely on the Rust SDK they have maintained.\nAs such, I cannot think of a better fit for the Developer Ecosystem challenge than this proposal. This will represent a very thoughtful investment for the treasury of our blockchain, as it directly impacts a large part of our developer ecosystem.\n\nMy assessment is made from the perspective of my previous experience as a mobile app development studio manager. I have also been involved with the Cardano developer community since March 2021 and I have been actively working with Cardano developers since July of 2021.", "q0r": 5, "q1": "The proposal offers a brief, but sufficient overview of the implementation plan and the timeframe it will take place in.\n\nI would have liked to see a more descriptive breakdown of the budget, that would perhaps include an estimated hourly rate, but since the entire funds requested by the proposal will go towards  paying a single developer in Q3 that can be easily deduced, assuming the work will take the entirety of the quarter (13 weeks.)\n\nDetails about the exact implementation team are few, but given that we are dealing with a larger company the exact engineer who will be working on this project may have not been selected yet.\n\nThe proposers answered \u201cYes\u201d to the new questions related to work on previous proposals or planned Fund 9 proposals, but don\u2019t provide any further details on how they plan to accomplish all the tasks and deliverables they have committed to. By looking at their page on the Catalyst data aggregator website, Lido Nation,  https://www.lidonation.com/en/project-catalyst/group/dcspark we can see that the proposers are currently working on 37 projects that have been awarded Catalyst funds and have submitted an additional 15 proposals in Fund 9. Given this, I think that the proposers should have addressed this concern, as requested by the question on the proposal submission form.\n\nEven though the proposal itself has a few shortcomings in the feasibility section, given the history of the developers behind this project I am confident that the team will deliver on what is outlined in the proposal and is more than capable of doing so.", "q1r": 4, "q2": "Unlike many other projects that are vying for treasury funding through Catalyst, the results of this particular project will be immediately visible to the Cardano developer community who will be directly working with the deliverables of this proposal by engaging with the Rust SDK.\n\nAs such this will probably end up being one of the most audited works funded by the community. Even though the auditability section of the proposal itself is bare-bones it is sufficient to extrapolate what are the KPIs and the deliverables we should track.\n\nBecause the dcSpark team has indicated that it will be returning to Catalyst to continue funding of this project my advice would be for them to include the data specifically requested by the submission form, such as a clear list of KPIs and milestones.", "q2r": 4, "assessor": "z_assessor_2169", "no_vca": 11, "ne": 3, "ng": 8, "nfo": 0, "vca_o": 1}, {"id": 2692, "q0": "This is a proposal by the well known company dcSpark to implement a solution for generating Rust code that supports multiple encoding possibilities, which will fix problems like getting inconsistent data back depending on what version certain dependencies are using (example of this problem: https://github.com/txpipe/oura/issues/307). The proposer has added quite a lot of detail about what the issue is and how it can be solved in the proposal, so I recommend that anyone interested check it out.\nThe risk that has been identified is that this solution might not be able to generate 100% of the required code for all the edge cases. Nevertheless, this will undoubtedly be a big help to developers and a big step in the right direction.\nI agree that the proposal effectively addresses the Developer Ecosystem challenge. Score: 5. ", "q0r": 5, "q1": "dcSpark, being very active in the ecosystem, has intimate knowledge of the issue at hand and several people in the company, including Sebastien Guillemot, will be working on implementing this. We are not provided with a detailed timeline or step by step plan, but the estimation is that the library for generating this code automatically will be finished early in this quarter (Q3) and until the end of Q3, it will be used to update various existing tools and libraries. The required amount of funds is 50000 USD, which is not much in this domain for several people and 3 months of work (though it would have helped a lot if an estimation of man hours were provided, so that we can have a clearer image of what the cost per hour will be here).\nRegardless, this is just the type of issue that dcSpark is used to working on and I am convinced they are highly likely to do this successfully. Score: 5.", "q1r": 5, "q2": "As is  the case with many dcSpark proposals, we are not provided with concrete key progress indicators or proper measures of success. As KPIs, my suggestion here would have been to aim for a number of libraries / tools this solution will be integrated with by X date and then communicate periodically via social channels where you are on that path.\nAs a measure of success, \u201cusage of the rust code generated by this tool\u201d is mentioned, but the important part is: how? How can the community measure this usage? Please consider providing this information in the future, so that the success of the proposal is easy to audit. As it stands, I can only give a score of 4 here.", "q2r": 4, "assessor": "z_assessor_2335", "no_vca": 7, "ne": 0, "ng": 7, "nfo": 0, "vca_o": 1}, {"id": 3789, "q0": "As stated in the proposal\u2019s title, CBOR encoding is a format widely used inside Cardano infrastructure. Not only blocks but also the metadata of your beloved NFTs and datums and redeemers in eUTXO useful for your favourite DeFi dApps are also depending on this as well. If you check the error in Github URL provided, it was quite serious since the returned transaction hash vs the expected one was very different. Moreoever, since almost all dApps and projects in Cardano depends on the Rust SDK more or less, this fix plus upgrade is ensuring all these dApps to work correctly and smoothly while also supporting other Rust tools through preventing the need to repeat the CBOR encoding from zero everytime. Furthermore, the benefit of this fix plus upgrade is its more efficient due to smaller memory overhead needed and helping the enforcement of canonical CBOR and also it is more robust. Lastly, please keep in mind that Rust is the most loved language to StackOverflow in 2021 and enjoys a large talent pool due to its syntax similarity with C based language. Supporting this proposal means attracting more able and willing developer talents to join, build, and grow the Cardano ecosystem from more diverse kinds of background.", "q0r": 5, "q1": "The work has been done sometimes ago (around May) before this assessment phase began. The result will be delivered in 4 months which is a perfectly acceptable duration and allow more through and critical fix and more stable foundation for important infrastructure such as price feed and CIP-25 Rust library. I also don\u2019t see any problem with the budget and consider this as public facility maintenance fee paid from time to time to ensure our neigbourhood/ecosystem is running flawless and smoothly. Rob and Seba themselves along with other contributing Rust developers in Cardano will handle this job. They  have successfully delivered and maintained the cardano-serialization-lib from their Emurgo days so they know very well what they are doing here, and trust me they are the best for the job. The risk of not all possible cddl formats can be codegen-ed 100% is acceptable due to time constraint. It is more important that we have majority of common cases in Cardano covered by them.", "q1r": 5, "q2": "Not much of concern here since this Rust SDK-related proposal is a regular on Catalyst Funds since Fund 5. Not once Rob and Seb failed to deliver a fully working result that can be enjoyed by most of developers here in the ecosystem. Everything related to the work can easily followed in the public Github repositories attached in the proposal. Success is straightforwardly mentioned in the proposal: wide and spotless implementation and utilization by all Rust related projects in Cardano. For more general crowd, the fact that all your favorite NFT marketplace, wallets, DEX, etc are working properly and just as smooth as now-if not smoother is partly (and it is a good chunk of part) thanks to work done by the tool and infra developers through this proposal. Project Catalyst exists as one of the main resources to back this kind of proposal up.", "q2r": 4, "assessor": "z_assessor_2482", "no_vca": 6, "ne": 0, "ng": 6, "nfo": 0, "vca_o": 1}, {"id": 5272, "q0": "The Rust SDK fix critical CBOR encoding proposal is to implement support in the ccdl-codgen (Rust code) that supports CBOR encoding scheme to ensure the reliability of Rust based Cardano tool stack. They will implement the change to the cddl-codgen library to automatically generate the code to handle all variations. Cardano not only use CBOR for block encoding but also metadata standard like CIP25, Plutus datum, redeemer encodings are all CBOR related. This will consume less memory overhead which will be positive for WASM-based library such as Cardano Rust SDK used by Cardano dApps. The solution can provide a stable foundation for other Rust tools so that they don't have to reimplement CBOR encoding from scratch and save time for developers. The DCSpark team mentions the risk that they might not be able to code gen 100% of all possible ccdl formats. They will document these limitations with regard to variations of CBOR encoding what they won't support for v1 release. There is also a potential for future scaling of this project with later releases.", "q0r": 5, "q1": "They plan to finish v1 of codegen library in early Q3 and later use the new codegen to update CSL, CML, Carp. The tool will be important for future proposal such as Cardano pricefeed ad CIP25 Rust library proposal. All budget will go to 1 rust developer along with other part-timer Rust developers. Sebastian and another team member rooooooooob will head this project. One concern though is that they will work on multiple projects in Q3 as they have multiple proposals in Rust area like gen tooling and add support everytime there is a Cardano hardfork as the team is the same team that work on multiple projects. It could be quite a challenge but manageable tasks for the team.", "q1r": 4, "q2": "The success for this project is to have new codgen implemented and released in the Cardano Rust SDK. They expect to see the Rust code newly updated by this tool in multiple rust projects like Carp, CIP25-Rs, CSL, CML along with downstream usage in other dApps. The community can keep track in their GitHub of this update and release quite easy.  The team has a clear understanding of issue to update Rust library support to ensure all possible encodings of data to prevent critical issues in the CBOR. The DCSpark team has come up with the solution to do this v1 release of rust support in ccdl-codgen  The team views rust as the fundamental of many projects that needs to be updated and improved in order to serve dApps and Cardano community.", "q2r": 5, "assessor": "z_assessor_2684", "no_vca": 7, "ne": 0, "ng": 6, "nfo": 1, "vca_o": 1}, {"id": 11516, "q0": "Proposal\u2019s solution has tremendous impact for developers as encoding issues are pain to fix, and right place where the solution should lie is SDK (used by many/all), so that a lot of same work does not need to be repeated in every project. This is one time solution and does not need to scale or be sustainable to future. Proposal is aligned with the challenge, with added value to every project using SDK. Full star rating is therefore appropriate.", "q0r": 5, "q1": "According to GitHub name references, team is well suited to implement fix and fix is already being implemented. What I miss in proposal is workhour expectation, wage, and references to GitHub lines so proposal can be properly evaluated (as it is mentioned in proposal that fix is already being processed). With detailed description of problem, and expectation to finish it early Q3 is realistic. Risks are considered and relevant mitigation is provided. With budged deficiency in proposal, feasibility evaluation is 3 of 5.", "q1r": 3, "q2": "Process and success of proposal is auditable as it is an open-source project. An issue containing problem on GitHub would improve proposal quality (one issue that is provided as example of problem relevance was already fixed). Success of proposal can be tracked by pull request/tests and release. Some proposal parts could be improved, but overall, it is completely auditable by Catalyst.", "q2r": 5, "assessor": "z_assessor_3255", "no_vca": 5, "ne": 0, "ng": 4, "nfo": 1, "vca_o": 1}], "solution": "We will implement support in the cddl-codgen for generating Rust code that supports multiple CBOR encoding possibilities to ensure reliability of the Rust-based Cardano tool stack", "experience": "Our team consists of the core authors of critical Cardano Rust infrastrucutre such as Carp, ddl-codgen, Cardano-Serialization-Lib (CSL) and CML. Additionally, we use and discuss regularly with txpipe (authors of Pallas, Oura and other Rust tools in the ecosystem)"}