{"id": 418458, "author": "nielstron", "title": "Imperator - Secure, Imperative SCs", "url": "https://cardano.ideascale.com/a/dtd/418458-48088", "category": 26597, "amount": 60000, "description": "Many programmers are unfamiliar with functional programming languages like Haskell/Plutus. Program analysis tools focus on imperative languages. Let's develop a secure, imperative SC language!", "f6_no_assessments": 7, "f6_rating": 4.571428571428571, "videos": [], "media": [], "f6_assessments": [{"id": 3543, "q0": "The proposer wants to create a language that is more usable for the mass of developers but has all the necessary characteristics and security of the already existing haskell and plutus. This is an amazing undertaking and I give kudos to Niels M\u00fcndler for the idea and PoC he's done. \nThis project targets one of the biggest hurdles of new develoeprs comming to the cardano ecosystem which is the lack of functional programming knowledge. One way is for all developers to learn FP and the other would be this idea. Introducing a new language specifically for smart contracts might seem harder that learning FP, but I assure you it's not, because the paradigms between the two are very different. \nThis will surely bring positive dev experience that will help in the creation of new smart contracts and therefore new daps so it's absolutely in the right challenge setting and aligns with developing frameworks perfectly. This is a reapplied proposal which I really hope makes it to funding this time arround and I urge voters to give a thubs up. As mentioned in the proposal this will be beneficial for all sorts of developers.\nThe key takeaways here are this is a proposal that could affect all developers, current and future alike, this is as big of impact for the dev ecosystem as you can have. I believe this is a great proposal and good luck to the Niels.", "q0r": 5, "q1": "All the necessary credentials concerning the possiblity of this project being successfully developed are present. I was able to verify the credentials and listed skills of the author, and the possible supporters of the project as well, since the muesli team are well known.\nThe budget is straightforward 800 hours for for for 50k that makes 62.5 $/hr which is reasonable considering the work that need to be done. Even though I'm a developer I've never written a compiler before, so I wouldn't know the first thing about estimating the time, which brings me to the point that the roadmap breakdown seems reasonable although refine prototype point is a bit vague to me, all the rest are understandable and reasonable. I really wish there was a better breakdown of the other part of the funding as well, meaning the bundled up - technical writing / marketing and networking which all have different price points and I couldn't make an estimation or a comparison between this and other projects and how reasonable they are, so that's a small caveat for the feasibility. I'm saying small because the sum of 10k is not too large for all 3 things to be done, so even with a rough estimation of 3k for marketing and the rest for technical documentation is  reasonable, considering the massive technical writing work for a compiler.\nThe roadmap is good and I loved the overview done in one of the idea fests for fund 8 so it got me onboard really quickly.\nThe proposal clearly explains the technical aspects and the business ones as well. Overall this is a really good proposal and I do believe it's absolutely feasible and beneficial.", "q1r": 5, "q2": "It's an open source repository, which means auditability won't be an issue here. Anyone interested in the project development can open the repository and have a look. Since this is a project that especially developers would be looking at I don't believe there's any more need for progress information besides commit messages, but the authors looks welcoming to inqueries given the redit AMA held, so I think auditability won't be a problem either way.\nThe proposal will try to deal with a very big problem and the solution to that problem is complicated but well defined nonetheless.\nGood luck and again kudos to the author of the proposal.", "q2r": 5, "assessor": "z_assessor_2463", "no_vca": 12, "ne": 2, "ng": 10, "nfo": 0, "vca_o": 1}, {"id": 4469, "q0": "The challenge setting for Developer Ecosystem asks for tools that developers want, that are capable of attracting new developers to Cardano or those that increase productivity and incentives for current Cardano developers. By its highly ambitious task of creating an imperative language for writing SmartContracts on Cardano that compiles into Untyped Plutus Core, the team behind this proposal perfectly address the challenge setting as developers unfamiliar or uncomfortable with Haskell and Plutus would find it much easier to learn the (proposed) Imperator Language. Imperator already has an impressive Github Readme resource and appears to be as simple and \"Javascript\"-like as you could expect at this stage of its life cycle and for its intended use. The goals of this proposal align almost identical with that of the challenge setting, demonstrating how ambitious and potentially high impact the proposal is. I am aware that the proposal is not uncontroversial and have my own reservations as someone who has fondness for Haskell and Plutus after studying it over the last six months or so. In my opinion, the proposed workaround for people who do not share this enthusiasm seems highly viable though, as it preserves the desirable features of the eUTxO model and still works based on Smart Contracts acting as validators rather than actors, while allowing development in much more \"mainstream\"-looking (and arguably more comprehensible to the average developer new to Cardano) code. In my opinion, this proposal is extremely worthwhile given the potential upside it offers and the relatively modest funding requested.", "q0r": 5, "q1": "This proposal sets itself the very ambitious goals of both overtaking Plutus in the amount of Github stars/forks/downloads, and increasing smart contract deployed on Cardano \"sharply\". I do not claim to consider these goals highly likely anytime soon as the result of a modestly funded, single Catalyst project, but agree that it has the potential to produce a minimum viable product that deploys to the testnet and shows promise for further development and mainnet deployment. That in itself would be a huge success, and is underpinned by the MuesliSwap team supporting the proposer as co-proposers and advisors for this project. The proposal presentation could have been improved by more clearly separating long-term goals and possible future development from a clear-cut short term goal and timeline. and not only allocate a breakdown of the total 800 hours of work required to different functional tasks (which is good) but also the different milestones and timeline or periodic check-ins or sub-goals. The existing documentation, Github page of the proposer, the previous work mentioned and the link to MuesliSwap all demonstrate credibly that the proposer has the skills required for this project. In addition to Github and Twitter references, further mention of work experience and more detail about the collaborators/team members mentioned would have further improved the quality of the proposal.", "q1r": 4, "q2": "Thankfully, the proposal already has an active Github presence and future work on this project will be trackable via Github. This goes a long way to mitigate the lack of other metrics and the difficulties I see for the community to otherwise audit or follow the timeline which is very research-centric and mostly consists of internal processes until 2023. Thankfully, the integration into MuesliSwap, the Twitter presence of the proposer and the promise of continued maintenance of the Github repo as the project progresses as Open Source all give me the confidence that it is likely that we will be able to assess the success and progress of the project along its journey. I wish the team the best of luck!", "q2r": 4, "assessor": "z_assessor_2554", "no_vca": 6, "ne": 2, "ng": 4, "nfo": 0, "vca_o": 1}, {"id": 4627, "q0": "Your proposal to build Imperator is the SC language. The proposed team's problem is that many programmers are unfamiliar with the Haskell/Plustus programming language, which is suitable for Challenge. This is a problem that addresses a critical challenge question in the SCs language development ecosystem: how to assist developers. The proposal is the basis for extending and maintaining the SC language's code base, therefore the proposed team will expand in the future. The proposed SC Imperator language increases the size and quality of the Cardano blockchain developer community, attracting them to expand the ecosystem with new innovative contracts. The proposal's solution improves verification focus and security by including notes on The Viper for all developers. Imperator will be similar to popular languages such as JavaScript and Solidity, making it simple for a large number of new developers to join. Imperator will most likely be the solution to assist developers with Cardano blockchain knowledge in adapting to smart contract authentication and coming up with new solutions that reduce the cost of learning a new language when getting acquainted with the ecosystem. These are valid arguments. The proposal is specifically addressed for smart contract developers on other blockchains or within Cardano, as well as software engineers or front-end developers who can quickly verify and execute smart contracts. \nThe proposal also recognizes the risks of putting it into action, such as seeking and obtaining developer feedback on Imperator's language design. The proposed solution to this issue is to stay in close communication with and contact many additional developers on and off the Cardano network to gain feedback on the language's architectural direction so that it can be easily used. Another risk that Imperator may confront while performing, in my opinion. As you have indicated, this proposal has incorporated security and verification; you should add the risk section because it is a crucial and necessary aspect of smart contract implementation. Because this is a new language during development, programming faults are unavoidable, and the solution is to be supported by developers to reply, testing over the network.\nI agree with the proposal's problems, justifications, risks, and remedies. If Imperator is successfully deployed and developed, it will have a significant impact on the developer community both within and outside of the Cardano ecosystem. In this part, I score 4 points.\n", "q0r": 4, "q1": "The proposal plans for the project to be completed between the third and fourth quarters of 2022. Smart contracts will be developed during the next three months, with expansion beginning in 2023. The timetable proposed is reasonable. In particular, the proposal will be to expand the data feature, preserve control, then transfer to the Viper verification framework, implement the automatic test set, and construct the dApp developer network in the third quarter of 2022. To make progress with Imperator, the team proposed building the first sample contract, deploying it on the testnet, verifying and testing it, and receiving feedback from developers in the fourth quarter of 2022. Beginning in 2023, the project will broaden testing and screening to include production, guidelines implementation, library building, and product optimization. Github is where you can track the project's progress. The most recent update on this channel was 22 days ago, however the project's technical and technological updates were made 4 months ago.\nThe funding budget for the project is $60,000, which accounts for 6% of Challenge's total budget. This funding exceeds challenge regulations; Catalyst mentions that the budget of each proposal must not exceed 5% of the entire budget of the challenge; to avoid breaking this regulation, you can split down the stages of project implementation and request for funding at various funds. The proposal's budget spending plans are appropriate. The proposal, however, makes no provision for the expenditures incurred as a result of ADA inflation and price fluctuations, which normally account for 7-10% of the entire cost of the proposal.\nThe proposed team includes of a key person who is the project author and previous developers. The proposal team has unique task assignments geared to the support groups' experience and tasks. However, the group has not yet come up with the personal information channel for each member in order to validate their identity. The project team should attach a link to the proposal in fund 8 so that anyone interested in the project or developers can check the progress and the most recent updates on project status. There is no certification or intellectual property in this project.\nYou have provided reasonable deadlines for implementing the proposal; you may track the project's progress on github. The lack of a contingency cost, as well as the budget exceeding the challenge's budget limitations, affects the proposal's feasibility. Furthermore, the proposed group has not yet developed information channels that verify the identification of its members, limiting the proposal's execution.\nThis section receives 3 points from me.\n", "q1r": 4, "q2": "Imperator will be totally open source, which will serve as an indicator of the project's progress. The second metric is the number of stars and downloads of the project on github, while the third indicator that measures the project's success and progress is the number of unique smart contracts deployed on Cardano. This is easily verified by looking at the main repository and tweets on Twitter. The proposal has approximately 1.4k stars and hundreds of downloads. The second success is said to be having hundreds of thousands, if not millions, of smart contracts running on Cardano. Additionally, developers that participate in Plutus' pioneering program or read through a short course on obligatory SC language development using Imperator will enable Web3 developers save time by building on Cardano in a matter of weeks rather than months. The proposal's successes are related to challenges because it encourages more developers to participate in the implementation of smart contracts on Cardano. The proposal is a brand-new project with no existing test product. \nI agree with the project progress measurements, the realistic projected timescales, and the specific achievements outlined in respect to the Challenge. The proposal to provide the number of smart contracts created with Imperator is quite ambitious; but, if it truly works, this is a reasonable and easily verifiable quantity. This part has a 4 from me.\n", "q2r": 4, "assessor": "z_assessor_2576", "no_vca": 7, "ne": 1, "ng": 3, "nfo": 3, "vca_o": 1}, {"id": 5154, "q0": "The proposal tries to create Imperator, an imperative programming language that can write a smart contract on Cardano. The proposal has proposed a solution to a problem many developers, including myself, experience, that is a transition from an imperative programming paradigm to a functional one like Haskell/Plutus. If successfully implemented, the effect of the project on the Cardano ecosystem is immense and can't be overstated, by migrating a large number of developers to the space. It must be appreciated though this proposal is much better written than the previous proposal (which didn\u2019t get funding in fund 8 and I had once reviewed). The proposal outlined the main risk of the project as reaching out to developers and getting their feedback. However, the proposer has a mitigation plan by collaborating with the Muesliswap team. As a developer aspiring to write smart contracts but struggling with Haskell I\u2019m very excited and will keep up with the project.", "q0r": 5, "q1": "Timelines are written in great detail, written in a format of quartal in a year. There is a budget breakdown for each of the milestones needed to implement the project. Proposers provide an estimate of the time required to complete the project. Hours needed to complete the project are important to let voters the load of the project, and thus conclude if the proposed budget is reasonable or not. The proposal gives concise information on the background, relevant skills, and experience of the proposer and the Muesliswap team. The proposal provides a GitHub link so that the community can decide the abilities of the proposer. It would be better if the proposal also provide a LinkedIn profile of the proposer.", "q1r": 5, "q2": "The metric of success is concise and very clear, the developer uses the programming language measured by the number of stars/forks/downloads of the Github project of the language. Those statistics indicate developers actually use it for the development of smart contracts on Cardano. The proposal is very ambitious with an exceeding number of Plutus source code with 1.4K stars, and a target to near solidity with around 20K stars.", "q2r": 5, "assessor": "z_assessor_2675", "no_vca": 9, "ne": 0, "ng": 5, "nfo": 4, "vca_o": 1}, {"id": 8310, "q0": "First and foremost, I would like to congratulate the proposer for presenting a well-composed proposal. All the details are diligently written, the intention and methodologies are clear, and the problem statement is quite precise. The proposer also mentioned that they submitted this proposal in Fund 8 and missed the approval of the Funding by a very small margin, unfortunately. However, here it is once more in Fund 9, which is another effort by the team that I admire.\nAll developers, including the typical Front-End developer or Software Engineer, are welcome to participate in this project, regardless of their familiarity with Cardano, other blockchains or Smart Contracts in general. Imperator is a SC language that resembles famous imperative programming languages with a large number of developers following, such as JavaScript or Solidity. It is a sophisticated language with a focus on usability and security, which are the two standards most people are yearning for.\nThe project's aim was acknowledged, and the proposal explicitly stated the impact it could have on users. The methodologies required to finish the project are not, however, mentioned by the proposer. The material needed to develop the project was available on the project's Github page, including the language prototype, programming techniques, and technical specifications. To make the project more persuasive, I advise the proposer to directly include the methodologies in the proposal.\nIn the possible risks and challenges section, the proposer identifies their main concern as the feedback from developers using Imperator and whether it gives them convenience while using. And the proposer plans to mitigate this by communicating with developers and reaching out to as many developers as possible for the most multidimensional view of the project, which I believe to be well thought-out and effective.\nOne crucial thing that is missing from this section is the key metrics to measure how success would look like for Imperator, for example, the number of developers willing to adopt it or the number of applications successfully deployed with Imperator compiled in the codes.", "q0r": 4, "q1": "It\u2019s surprisingly pleasant to see that the proposer has already had a prototype of the language for beta testing, which can be accessed with the provided link. Then the proposer continues to describe their intentions for development in the upcoming months, followed by the timeline and milestones where tasks are distributed into the 2 remaining quarters of 2022, with the finishing touches coming in 2023 and onwards. Though the details leave more to be desired, I believe that the proposer has provided an adequate amount of information. \nAnother part that the proposer nails is the analysis of the requested budget, which will be evenly apportioned for each segment, including the human resources, tasks and the time needed to finish them. Based on what I\u2019m given to understand, I would say that the funding is justifiable.\nThe team behind this project consists of the proposers and several developers who have been cooperating with the proposer. And all of them have been enclosed with relevant expertise and past experiences to prove they are capable of handling this project. Furthermore, the proposer also looks to onboard a marketing expert when this proposal has been Funding-approved. The only thing I would love to ask for are LinkedIn profiles of the proposer and the group of developers for a closer look.", "q1r": 4, "q2": "By confirming that the project will be fully open source, the proposer has earned themself a good reputation in clarity. In addition, by keeping an eye on the number of commits in the primary repository, progress on the project can be continuously monitored. Followers will be updated on the progress of the work via regular tweets. And there are also two key metrics listed to measure the degree of future success of this project, focusing on the popularity of the project on GitHub and the number of Smart Contracts scored on Cardano, both of which seem to be valid and practical.\nThe success of this project would of course be the state of Smart Contracts being feasibly and easily obtainable on Cardano via 2 standards. Imperator could be quicker to take in compared to Plutus, or finishing a project could be achieved sooner with Imperator compared to Haskell and the security feature on Imperator is guaranteed as well.", "q2r": 5, "assessor": "z_assessor_2974", "no_vca": 4, "ne": 2, "ng": 2, "nfo": 0, "vca_o": 1}, {"id": 9619, "q0": "Currently, the familiar programming language of most programmers is still imperative programming languages \u200b\u200bsuch as Java, C#, Python, and JavaScript. The number of programmers who know and use functional programming languages \u200b\u200blike Haskell and Plutus is only a fraction. Changing programming style from imperative to functional is a headache for programmers because it requires them to change their mindset and start from scratch. That leads many developers to be afraid when they first approach smart contract programming on Cardano. The developer experience is, at the moment, the biggest bottleneck for Cardano adoption in my opinion. This proposal aims to build an imperative smart contract programming language to help developers feel more familiar and be able to start building dApps within weeks instead of months as for Haskell. This means that developers' lives will be easier, more developers will be attracted to Cardano, and ultimately increase developer adoption. Therefore, I rate 5 stars for the project's impact because of what it brings to the developer community.", "q0r": 5, "q1": "The information about the proposer's skills and experience was clearly stated in the project, in addition, the project was consulted and supported by the MuesliSwap Team. The proposer has also developed a prototype for the Imperator language and provided a GitHub link for the community to dig deeper into his capabilities. With the direction of building this language open source, I assess the proposer has the ability to carry out this project with the help of other volunteer developers.\n\nThe budget has been broken down into specific and clear items. In my opinion, this budget is perfectly reasonable to build a programming language in 6 months.", "q1r": 5, "q2": "Because this is an open source project, the community can completely track the progress of the project based on the number of commits on the main repository. At the same time, the proposer also regularly updates the progress on the project's Twitter page, so I think this project provides enough information for the community to audit the project's progress.\n\nMetrics to measure the success of the project are also stated, including the number of stars/forks/downloads on GitHub, and the number of people using Imperator to program smart contracts.", "q2r": 5, "assessor": "z_assessor_3068", "no_vca": 5, "ne": 0, "ng": 5, "nfo": 0, "vca_o": 1}, {"id": 14629, "q0": "The project is intended for all developers, whether they have experience with Cardano, other Chains, Smart Contracts in general, or even just the average Software Engineer or Front-End developer. Imperator is an SC language that has the appearance and feel of widespread and popular imperative languages that are well-liked by developers looks and feels like JavaScript or Solidity. It is an advanced language with an emphasis on security and usability.\nThe proposer mentioned the purpose of the project, and clearly stated the effect it can bring to users. However, the proposer does not mention the techniques needed to complete the project. I went to the project's Github link and found the necessary information to build the project, for example, the prototype of the language, programming methods, and technical requirements. I suggest that the proposer add such information directly to the proposal to increase the persuasiveness of the project and because the Github link is easily missed if the reviewer does not pay close attention to this issue.\nIn the risk resolution section, the proposer identified the risk is getting feedback from developers on the language's design and offering their comfort. However, perhaps the proposer has confused between risks and problems because, in my opinion, this is an objective problem from the customer after the project has been completed and put into operation. The language design belongs to the content of the work list, and the feedback from the customer will be the foundation for continuing to upgrade the next versions. Besides, I appreciate the thoughtfulness of the proposer for paying attention to personal feelings with the idea of helping developers be usable and comfortable from any background.", "q0r": 4, "q1": "The proposer has provided a project implementation plan that includes the following contents: task list and implementation period, but it is not clear enough. The proposer has outlined the backbone of the project, I suggest the proposer add more details about the work plan, for example, the contents: how many hours the work is estimated will be done, when it is expected to start (day/month), who will be responsible for the result of the above plan, and what results will be achieved upon completion of each phase. The detailed description of the above contents will help the plan be more complete and clear, creating the foundation for budget setting.\nThe budget breakdown proposed by the proposer is reasonably allocated and clearly listed for each content (including the time element). I have no comments on this budget allocation plan because the proposer has performed it very well, in line with the original request for requested funds.\nThe member implementing the project is a computer scientist specializing in automatic program verification and computation theory. In addition to that, there is the collaboration of MuesliSwap - the first DEX on Cardano to offer technical as well as networking support through connection to the Cardano DeFi Alliance.", "q1r": 4, "q2": "This project will be fully open source. Progress on the project can be continuously tracked by checking the number of commits in the main repository. The proposer has provided specific and reasonable numbers of users, downloads, reviews, and expected traffic. Success means that creating a Smart Contract on Cardano can be done in at least two realistic and comfortable ways: either by enrolling in the Plutus Pioneer program or by reading a brief introduction to the imperative SC language. And the above successful intentions are grounded, and consistent with the contents of the proposer stated in the project implementation plan.", "q2r": 5, "assessor": "z_assessor_4076", "no_vca": 5, "ne": 0, "ng": 5, "nfo": 0, "vca_o": 1}], "solution": "Imperator is a language for SCs that looks and feels like well known imperative languages popular among developers. It is a specialized language that focuses on security and intuitivity.", "experience": "I am trained computer scientist focusing on theory of computation and automatic verification of programs. I have already developed a prototype for the language. I am experienced in developing and maintaining high quality open source projects, which I aim this language to become!"}