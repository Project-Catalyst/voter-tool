{"id": 398609, "author": "liqwid.labs", "title": "Plutarch: typed eDSL in Haskell", "url": "https://cardano.ideascale.com/a/dtd/398609-48088", "category": 26434, "amount": 75000, "description": "Stateful Plutus smart contracts (DeFi) are difficult to implement\u00a0due to Cardano\u2019s current transaction size parameters (16kb Tx size limit).", "funded": 2, "upvotes": 348111439, "downvotes": 3140287, "votes_result": 344971152, "votes_cast": 1639, "f6_no_assessments": 3, "f6_rating": 5.0, "videos": [], "media": [], "f6_assessments": [{"id": 650, "q0": "The team does a pretty good job laying out the broad strokes for the Plutarch functionality, and the important part to focus on here is the Ptype bridge to the UPLC (untyped Plutus Core).  The UPLC is actually the compilation target of Plutus that runs onchain, and as a result there is a lot of Haskell's lazy semantics (deferred actions that may never become necessary) tagging along and bloating the script.  Besides making it difficult to think through the implications of the code, it also makes the (16kb Tx size limit) a decisive limitation for anything but the simplest Plutus Tx smartcontracts.  Starting with Ptypes, Plutarch basically wraps up the complexity into \"terms\" that allow the smartcontract coders to use the simpler, smaller typed Plutarch to significantly reduce script size, cpu usage, mem usage, all while maintaining Haskell's utility.  Expect this to enhance smartcontracts not only by making them much easier to code, but by increasing what they can do with 300%-400% resource efficiency.  The Plutonomicon is already well underway, and this funding will be able to formalize the development, and improve, vastly, the collaboration going on.", "q0r": 5, "q1": "Fantastic description of the types and terms that form the basis of Plutarch, and just enough description of the bridge to UPLC that I think most voters will be able to understand both the need and benefits of this.  Since it is the only team doing this, it is by definition the best team for the job, and they have linked up the repo, so everything you need to know about what they are doing is right there.  There is no detailed timeline, but they have a clear list of deliverables and the budget is broken down with extreme precision for number of hours in each area of formalization.  A total of 1150 plutus engineer hours, at an approximate rate of $65/hour (a lot of projects would love to have access to that rate) adds up and doesn't add anything else.  Going forward, they will need to keep doing maintenance as CIPs come out, but for now, the team sounds like this proposal will have that covered.", "q1r": 5, "q2": "As an  Opensource code repo, already available and with over 1000 commits, this will be an active project that is easy to track.  With 22 forks that can be a pretty good sign that it is being picked up as well, and the team is watching the repos usage to get an idea of how many projects are moving to Plutarch.  It is hard to say whether the project considers itself a 3 month or 6 month timeline, but my suggestion is 3 months to get to 1:1 with PlutusTx, and close the project, and then do the CIPs as they come along.  The first part is probably worth the price anyways, and, while the summer and fall CIs are pretty solid, there is too much variability to lean into them any more than you have to, and they don't have to.  It will be a tricky metric to explain and report, but working through PlutusTx a chunk at a time to report 1:1 functionality makes the most sense (and will to IOG as well).", "q2r": 5, "assessor": "z_assessor_1193", "no_vca": 13, "ne": 7, "ng": 6, "nfo": 0, "vca_o": 2}, {"id": 6696, "q0": "I strongly agree that this proposal effectively addresses the challenge. Through this proposal, proposer is proposing to build embedded Domain specific language which will allow to write simply typed lambda calculus code that will allow to keep using strongly typed features of Haskell and yet be able to compile to compact Untyped Plutus Core (UPLC).\n\nMoreover, This Plutarch repository is already open sourced under MIT license and has comprehensive documentation in place. The usage of Plutarch will allow developers to write more efficient validator code, as the benchmark tests results provided on GitHub show significant improvements compared to PlutusTx based scripts. \n\nAt present, Smart contract scripts written in PlutusTx also eventually get compiled to UPLC but the size of these scripts may be larger and hence affect the overall network speed, e.g. because of the larger script size. The UPLC is both complex to write directly and also has a limited set of features if compared with haskell, therefore, with plutArch Haskell developers will have easy onboarding and a wide feature set to write scripts on Cardano. \n\nI agree that any open source project requires original maintainers and high code quality so that PRs (pull requests) are well reviewed before they get included in the main repository. The risk/Challenges touches on these topics and hence explains that the team has already thought through this and has significant work experience in building open source projects.\n\n", "q0r": 5, "q1": "I strongly agree that this proposal is highly likely to be implemented successfully. The Liqwid team (along with the MLabs team on the implementation side)  is behind this proposal and has done a marvelous job in providing several open sourced libraries and tools for the developers of the Cardano ecosystem. \n\nThe budget breakdown and timeline estimates are well explained in terms of Engineering hours, which is the entire man hours needed for this proposal to be implemented/enhanced. \nHowever, the benefits for the Haskell developers are mentioned under the feasibility section, which would be better fit in the impact section of the proposal. \n\nNevertheless, based on the work that is already presented on the Github repository, along with comprehensive documentation explaining the technical details and architectural decisions behind plutarch, I find the timelines realistic. Good luck to the team and thanks to them for their great work on building great open source tools for us developers.\n", "q1r": 5, "q2": "I strongly agree that this proposal presents sufficient information to audit the progress and the success of this proposal. The team has provided the Github repository, where the community can see the activities in terms of commits, forks and stars the repository has received so far. These numbers, as they grow with time, will be a very good indicator to see how the progress of this proposal (plutarch implementation and enhancements) is going on. \n\nAdditionally, the success of this project for 3-6 months is provided, where higher level feature sets are mentioned. The 6 months time frame of extension to include the latest CIPs (Cardano improvement proposal) in this repository is very important, because as plutarch development is progressing there will also be improvements on Cardano, and it is hence required to bring in those changes to plutarch as well. \n", "q2r": 5, "assessor": "z_assessor_454", "no_vca": 5, "ne": 2, "ng": 3, "nfo": 0, "vca_o": 1}, {"id": 7073, "q0": "After a bit of research I believe I udnerstand whatt this proposal is about and I think it's some impressive engineering, and as a developer myself I'm really impressed. The proposers want to enable everyone to generate validators written with Plutarch that would execute faster than validators written with Plutus Tx. Both would compile to Plutus Core, which is the cardano scripting language that is used to run validators. These validators need to run and return positively in order for a \"transaction\" to be spent. So the faster the validators run the faster the transactions would be spent from what I understood. Another benefit would be that with Plutarch there's a more fine tuned control over the Plutus Core validators you generate. \nIf that's the case this would be one of the most impactfull proposals in the cardano ecosystem for this challenge. I'd suggest to the proposers to spare us from understanding the technicalities in such detail and explain things in simpler terms next time (please). With this said I don't see anything missing from this proposal and I'd be very interested to follow along with this projects' progress. \nThis proposal is surely in the right challenge setting, and the fact it's open sourced is amazing considering the work being done. Overall this is an amazing proposal and I'll be searching for it when voting time comes. Extremely detailed if a bit too technical. Good job guys!", "q0r": 5, "q1": "MLabs will be responsible for the development of this proposal. From what i've seen in this and other proposals they have a team full of proffecionals that would be up to this complicated task. I was able to verify the skillset and credentials necessary to get the work done. The implementation plan is quite complicated and detailed, but I really like there's a clear way forward segregated into understandable chunks. \nThe budget breakdown is another very detailed presentation where the average pay per hour s around 65 which is a bit lower than the standard 80 so I'd call this a bargain keeping in mind the complexity of the whole project. The technical aspects are explained and clear, you just have to know the terminology which I can respect. The solution provided is really an optimized and would help a the whole ecosystem.\nI really liked the challenges section because while reading the proposal I had the very same thoughts about what the challenges for such a project might be, like finding consistent people to work on this project, but I belive the remedies provided are more than acceptable.\nThe project is definitely in sync with what others are doing and what does the community need in order to progress and be competitive. I'd still suggest for the authors to look through the eyes of the voters and read their highly technical proposal and see it's not for everyone. Overall not only feasible, but IMHO a necessary proposal to be funded and implemented.", "q1r": 5, "q2": "There's a github repository present so anyone interested in the project as I am can go and click the Eye icon to follow along with the progress of this project. There\u2019s a good roamap pointing to the milestones that will be done in the future after the proposal is funded. Segregated tasks and clear vision for the end result. The metrics and KPIs are reasonable and would help the proposers to keep optimizing and getting implicit and explicit feedback from their community. The problem and solution descriptions are clear though a bit technical. Overall there would be no problem with the accountability and auditability of this project since it's open sourced and anyone can have a look as I will surely do.", "q2r": 5, "assessor": "z_assessor_536", "no_vca": 3, "ne": 0, "ng": 3, "nfo": 0, "vca_o": 1}], "solution": "Typed eDSL in Haskell for writing significantly more efficient Plutus Core validators compared to the PlutusTx smart contract execution cost", "experience": "Multiple advanced Haskell / Plutus engineers working on Plutus and it's related infrastructure since Q1 2021.\n\nMLabs Haskell engineers are committed to building Plutus open source tooling to lower the entry barrier for new Plutus dApp developers entering the Cardano ecosystem."}