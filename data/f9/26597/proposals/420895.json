{"id": 420895, "author": "jkoppel", "title": "Automated Bug-finding for Plutus", "url": "https://cardano.ideascale.com/a/dtd/420895-48088", "category": 26597, "amount": 68200, "description": "Double-satisfaction bugs, clone script attacks \u2013 the same vulnerabilities repeat in Plutus contracts. We will build a tool that automatically finds subtle instances of common bugs.", "f6_no_assessments": 6, "f6_rating": 4.333333333333333, "videos": [], "media": [], "f6_assessments": [{"id": 724, "q0": "The proposers clearly state the benefits of the tool they plan to deliver to the community. The tool will improve the developers\u2019 experience by being able to discover common vulnerabilities and flaws in a fraction of the time of traditional audits. This aligns with the challenge setting of creating an awesome experience for developers and potentially bringing new developers to Cardano, knowing that the auditability of their code is straightforward.  The project scales well as a tool will be delivered that developers can use.  Proposers might return for additional funding if there are upgrades and it's libraries.  The proposers have a tool Cubix which already does this for other programming languages, and they intend to add support for Haskell and Plutus through this funding. They highlight that the tool is able to scan quickly through a lot of code and find bugs and give an example of finding a bug in 1.2 million lines of Java code in mission-critical software. Plutus smart contracts, on the other hand, are not particularly long. Having gone through the Plutus pioneer program (1st cohort), the size of the logic of the program was no longer than 100 lines of code. Therefore I am not sure if this tool would be too powerful for the job, very useful nonetheless. I think we need a market research on how many hours of work and dollar savings could be had with this tool versus doing a traditional audit", "q0r": 4, "q1": "The two proposers are James and Nils. They provide a short bio for each, links to their website, and news articles where they found a bug in mission-critical code. Unfortunately, there are no Linkedin profiles, but I  could validate their background by going through their websites. They were distinguished students at university, and Nils is a Plutus Pioneer from 2021 (confirmed by a minted NFT). The project plan is split across 6 bullet points which will be delivered in 6 months and there is an attribution of who will deliver what pieces of work and an hourly budget. The total budget is $68,000 at an hourly rate of $130/h for James and $80/h for Nils. This is at the upper range of hourly rates I have seen across 40+ proposals, even for experienced developers. The architecture and language are discussed, and this will be an addition of Haskell and Plutus support to their existing tool. The risk called out is that Haskell is quite different from other languages, particularly in how it uses loops (rather, it uses recursion for loops). Therefore this might be a challenge in their implementation. The other risk highlighted is that Plutus uses exceptions in validations, and their tool has poor support for exceptions. However, the authors published research on how to deal with that. Overall, I think the team is experienced, and this work is an extension to a tool rather than building an entirely new tool; however given the risks and the lack of a detailed plan I think there is a material risk that the timeline gets delayed.", "q1r": 4, "q2": "A roadmap with milestones is provided, yet it is not very detailed and is summarised in 6 bullet points. The KPIs are well structured and focus on the number of queries they manage to build into the tool, the effectiveness of finding bugs and false-positive rate. The team will also deliver a set of challenging tests for the tool to solve to measure its effectiveness. Success is a tool that is able to produce a near-instantaneous repot with bugs in the code. However, no mention of communication channels with the community or open-source repositories to track progress is made. I think the KPIs and success metrics are quantitative and well defined; however the plan is quite high level, and there is no mention of how the community will receive updates and check the integrity of the updates.", "q2r": 4, "assessor": "z_assessor_2123", "no_vca": 9, "ne": 1, "ng": 8, "nfo": 0, "vca_o": 1, "reply": "Feels slightly odd for an MIT scientist to get called a \"distinguished student.\"  \n I don't agree with many things in this assessment, but appreciate the serious thought that went into it."}, {"id": 4210, "q0": "The \"Automated bug-finding for plutus\" proposal addresses the Developer Ecosystem challenge by adding Haskell/Plutus support to Yogo which is a semantic search and bug-finding tool for C, Java, Python based on automated reasoning techniques. Yogo allows users to write \"user-specified value\" and then write queries that exhibits a class of buggy behavior. They will bring Yogo to Haskell and Plutus and develop rules & queries for finding common bugs and vulnerabilities in smart contract. Yogo is built on Cubix (multi-language infrastructure which currently support C, Java, Javascript, Lau, Python. The team will add Haskell support to Cubix then add Haskell support to Yogo and then write bug-finders using Yogo. This will help shorten the requirement of developers to auditor. Yogo will discover common vulnerabilities and flaws compared against traditional audits and hence, this will lead to more productivity of developers in building the apps. The proposal has identified the risk as ability to share less technical description compared to the existing languages. There might be a need for generalize scoping system for Cubix, use of recursion instead of loop in yogo, handle the exceptions in validators in Plutus and building effective bug finders (finding things that are absent). The score in impact could improve if the team can explain how effective their automated bug finding for plutus when comparing against traditional audit and how likely it is that this would replace the works performed by audit or at least reduce the required work that needs to be performed by the audit. The main reason I mention this is that the traditional audit on smart contracts is costly and if this solution would work and reduce this audit cost, there would be no doubt on its impact on this developer ecosystem challenge.", "q0r": 4, "q1": "The project duration is 6 months by spending 2 months each to for haskell support to Cubix and to Yogo accordingly with the conclusion of bug-checkers development using Yogo in month 5-6. The team provides the team members profile (please supply linkedin for future funding round proposals). The number of working hours on this project along with the pay rate are provided by the team. The timeline and milestones are sensible and highlight the main work that needs to be performed. The team is very capable as demonstrated by its foreseen risk/challenges in delivering the project. From the information provided, it is very likely that the team can deliver this project successfully.", "q1r": 5, "q2": "The project will be a success if the developers are able to obtain near instantaneous reports on flaws and vulnerabilities in their code. The KPIs provided by the team as Yogo flagged more than 2/3 of double satisfation, resource limit and clone script attack vulnerabilities in a corpus of vulnerable code comparing against traditional past audits. and also flag more than 1/2 of APIs misused. The team has a clear understanding of the common bugs in plutus contracts and build an automatically tool to handle these common bugs. It is not clear from the proposal where the community can measure the project progress  and completion. Note that there is no mention in the proposal that the project will be open source and Yogo is a proprietary static analysis tool originating as an MIT research project. It is still questionable how the community can observe developing functionalities and utilize Yogo upon its enrichment with haskell support. ", "q2r": 4, "assessor": "z_assessor_2525", "no_vca": 6, "ne": 2, "ng": 4, "nfo": 0, "vca_o": 1}, {"id": 4478, "q0": "This proposal is specifically aimed at Plutus smart contract developers to make it easier to find bugs and vulnerabilities. It directly follows the challenge brief that calls for tools and integrations that make it easier to develop on Cardano. The proposer has already developed a programming language (Cubix) that is used in the existing bug finding tool Yogo already working in several programming languages. The proposal aims to add Plutus integration for Yogo, which involves adding Haskell to Cubix first. It is beyond doubt that this kind of project is exactly what you would expect in a challenge category for the Developer Ecosystem, so the question is whether it would have enough impact to justify the funding asked for. Plutus has a reputation for being very safe and already produces much more robust and verifiable smart contracts than say Solidity. This does not mean it is bug-free (https://github.com/input-output-hk/plutus/issues). Currently, smart contract verification of Plutus exists, but is quite costly. This tool would provide a possible direction to lower the barrier of entry for Plutus verification and reduction of vulnerabilities, and at least for medium sized to larger projects with some own Plutus and Haskell skills offer a more efficient way to test and improve their smart contracts. Because of this, overall efficiency and talent pool of the Cardano Dev Ecosystem would increase, exactly what this challenge tries to achieve. Even if very technical and build on a bespoke, niche language, this tool could prove to become a very powerful part of the dev arsenal and has potential for high impact. The documentation, portfolio and links provided show a very credible team and previous portfolio of projects (more on that under Feasibility) and further support that this could have large positive impact for developers of Cardano smart contracts.", "q0r": 5, "q1": "The lead proposer (https://www.jameskoppel.com/) has an impressive academic and development background suitable to make this project a success. The existing tool has received accolades and been covered positively by peers, giving me the confidence that it is robust enough to get a Haskell/Plutus integration. The co-proposer is a Plutus Pioneer First Cohort graduate (with graduation NFT proof) and both team members combined offer a strong coverage of both high level Haskell / Computer Science as well as blockchain-specific smart contract development knowledge and experience. \n\nThe budget covers sufficient work hours by the highly qualified team, and the timeline is provided and appears to be realistic. Many academic publications of the team are publicly available and suggest that they indeed have existing Haskell knowledge and proficiency and are very deeply involved in multi-language development and advanced computer science concepts applicable to smart contract developments for Cardano's eUTxO model.", "q1r": 5, "q2": "This proposal provides a lot of thoughtful and relevant KPIs and performance measures to judge its success once completed. This is very good. It does however not provide any tools or mechanisms to track its progress over the implementation period, or links to the Open Source availability of the Yogo tool or how Github could be used to track the Haskell and Plutus integrations planned. The proposal manages well to convey its seriousness and deep understanding of the subject, but is relatively light in terms of sharing its intended workflows and how the findings and end result will be made available and shared with the community. It could be improved in that regard.", "q2r": 3, "assessor": "z_assessor_2554", "no_vca": 5, "ne": 2, "ng": 3, "nfo": 0, "vca_o": 1, "reply": "Psst....Cubix is a framework, not a language.\n\nCompliments appreciated! Thanks for the thoughtful review. Cubix is already open-source, and we will be open-sourcing all or part of Yogo."}, {"id": 7422, "q0": "Plutus is a programming language for writing smart contracts in the Cardano blockchain. This recommendation helped create the Yogo tool, which helps developers find bugs and vulnerabilities quickly. Therefore, this proposal is completely suitable for the challenge\nAlthough Plutus is really different from C, Java, and Python. But with the experience, capacity, and products that have been created, I believe the team will complete the project well. From the links provided by the project, after learning and experiencing it, I am really impressed with what you guys have created.\nWith the Plutus environment, Yogo is a ready-to-use product integrated into affiliated dApps or a separate tool for developers to use as needed. Ask the project to clarify this issue to assess the overall project. With continuous development, in the future, users will create simple smart contracts by themselves, applying to live is very popular.\nAs for the highly technical description, I don't really understand the differences, advantages, and disadvantages when integrating Cubix for Haskell and Yogo for Haskell, or are those consecutive steps, complement each other.\nI rate this section 5 points, the impact on the developer is very positive\n", "q0r": 5, "q1": "The project plans to last 6 months, divided into 3 main phases to be completed. The specific steps in the project implementation should be listed in more detail, thereby specifying the specific methods applied, helping the community have a visual assessment and interact with the project. At the same time, there should be a specific step of checking the code, making the tool more complete, and getting transparency and trust from the community.\nAs for detailed budgeting, processes are estimated by the hour. The community really appreciates the fact that the company pays \u00bd of the developer's salary, making the total application budget $68,200, accounting for 6.8% of the entire Challenge, an appropriate number. The team consists of 1 doctor, and 1 engineer specializing in software, developing programming tools with remarkable achievements. In addition to the capacity verification link, the project should specifically provide the social networks of the 2 members, so that the community can monitor activities and interact when necessary. In this part, I give 4 points\n", "q1r": 4, "q2": "The 4 KPIs listed by the project help measure development. Please specify the tool the project uses to measure the above indicators. Because there are non-quantitative indicators. I would like to add a few milestones as follows: Cubix update completed, Yogo update completed, audit completed, and a number of bugs fixed. Also, where will the project update progress and results? Please provide a specific path.\nThe success of the project will help developers safely deploy the product, shorten the testing time, and receive instant reports on errors, and holes in the code. With the suggestions, I hope to help the project to be more complete, 4 points for this part\n", "q2r": 4, "assessor": "z_assessor_2893", "no_vca": 8, "ne": 1, "ng": 7, "nfo": 0, "vca_o": 1}, {"id": 8753, "q0": "The proposal covers the basics of your idea - Yogo, a tool that uses automatic reasoning to find buggy code in multiple languages. I was able to learn how Yogo is built, works and functions through your presentation. In the second part, how your solution would address the challenge, it is clear that the project will help the developer to focus on building successful applications by discovering common vulnerabilities and flaws. However, I would like you to talk more about the impact of this project, especially on Cardano. In addition, some risks and measures are briefly described in the proposal. Personally, I agree with the basic data you have provided, they show that your proposal is not bad. It would be better if you could add more information like I mentioned above.", "q0r": 4, "q1": "The presentation did a great job at the breakdown of the budget and the introduction of my team members. The budget mainly pays for the work of 2 members, James Koppel and Nils Eriksson. The tasks and the amount to be paid by each member are listed in detail. Information about the members' profile, qualifications, and experience is also provided in great detail. However, your planning part is quite sketchy. The roadmap shows the milestones but the activities are not detailed. This makes the proposal unconvincing. A detailed and clear roadmap will help the proposal demonstrate the feasibility of the project. This is an important part so you should consider and add it.", "q1r": 3, "q2": "In this section, you have provided project metrics and specifically mentioned the non-quantitative measure. The success of the project is also briefly described as helping developers get near-instant reports of flaws and vulnerabilities in their code. Besides success, your reach goal are also mentioned with specific metrics. Overall, your presentation is not outstanding completely, but with such data, I think the auditability of the project can still be warranted.", "q2r": 5, "assessor": "z_assessor_2997", "no_vca": 7, "ne": 0, "ng": 7, "nfo": 0, "vca_o": 1}, {"id": 11945, "q0": "The proposal targets to add Haskell/Plutus support to Yogo that would enable new automatic bug findings for Haskell developers on the platform. The Yogo itself currently working with C, Java, Python, and others. The implementation of this project will bring a very positive impact by helping every developers in their hands-on coding, increasing their productivity when building smart contracts. The proposers is also absolutely credible, supported with their experience and track records which builds up the confidence in the ability to execute the proposal well. The proposers has also explained the risks of the project in a very detailed manner with each of them completely mitigated in a feasible way.", "q0r": 5, "q1": "The proposal mentioned that it will be run on 3 different phases, which are adding Haskell support to Cubix, adding Haskell support for Yogo, and developing bug checkers using Yogo. Detailed budget breakdown has also been provided, mentioning how many hours to complete each milestone and their technical development, however, the cost-per-hour is very expensive, yet, it should be reasonable since it is supported by the project impact provision, the developers in mention, and their track records and previous experiences. The proposal should also a LinkedIn/Github account/Other portfolio links for better background checking upon related experiences in development.", "q1r": 5, "q2": "By having quantifiable points as their KPIs which are the bug-finding queries built with Yogo, false-positive rate, and other points, the proposal has a very clear way to be audited. The defined success is simple and straightforward by having the fact that the Yogo helps developers get responsive and fast-paced reports on bugs when developing code. They also have added various quantifiable metrics as the goals to make it more countable and measureable.", "q2r": 5, "assessor": "z_assessor_3319", "no_vca": 5, "ne": 0, "ng": 4, "nfo": 1, "vca_o": 1}], "solution": "We have already built Yogo, a semantic search and bug-finding tool for C, Java, and Python based on automated reasoning techniques, published in PLDI 2020. We will add Haskell/Plutus support.", "experience": "Already built this tool for C, Java, and Python. Leader has a Ph. D. in programming languages from MIT, specializing in multi-language programming tools."}