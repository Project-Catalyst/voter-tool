{"id": 422478, "author": "rvcas", "title": "Aiken: Smart Contract Toolchain", "url": "https://cardano.ideascale.com/a/dtd/422478-48088", "category": 26597, "amount": 111480, "description": "For most developers the Haskell syntax of Plutus is unpalatable or too unfamiliar to hit the ground running. Although Plutus is a great language, this causes enough friction to slow down developers.", "f6_no_assessments": 5, "f6_rating": 4.466666666666667, "videos": [], "media": [], "f6_assessments": [{"id": 3572, "q0": "I really like the proposal, being to create rust implementation of the Untyped Plutus Core. It took me a while to understand what exatly that would mean and imply, because such an explanation is not included in the proposal. In short Untyped Plutus Core is the language that runs on chain. Currently this Untyped Plutus Core is a result of a few actions:\nSource Code (eg. haskel) is transformed into GHC Core (language)\nGHC Core is transformed into Plutus Intermetiate Representation through the help of the Plutus TX tool (part of the mentioned toolchain)\nPlutus Intermetiate Representation is transformed to Typed Plutus Core\nand finally Typed Plutus Core is transformed to Untyped Plutus Core that runs on the blockchain.\nAs far as I understood the endgoal is converting all the languages and accompanying toolchain to be able to build a new language to write cardano smart contracts on instead of plutus and haskell, which would have been really nice to have as an explanation in the proposal.\nAnother thing taken for granted is the knowledge of what an interpreter is (the short version is it's like a compiler but it looks at code line by line instead of the whole codebase). I don't know why that's usefull because I lost the will to google anymore, but it would have been nice if there was less assumptions that the people reading will have all the necessary knowledge to understand every term mentioned and would have the bigger picture already in place, which I didn't.\nEven so I do see the positive outcome by this proposal and it is definitely in the right challenge and in alignment with the challenge settings. I only wish the proposal was more polished and explained in simpler terms, while the more technical details is summerized in documents and links. Basically my suggestion would be to paint the bigger picture in the proposal targeting the voters and the assessors such as myself, and for anyone interested in the technical details, here are the resources necessary to understand what this all means.\nOverall I think this is an excellent idea and I will vote for it, even with the small caveats mentioned earlyer. I belive the rust community will be very happy if there's a native toolchain they can use and will be adopted easier.\n", "q0r": 4, "q1": "The people have all the necessary skills to bring this project to a successfull implementation. I've manged to verify their skills and match them with the ones listed in the proposal so no worries there. These are proffecionals, that have many years of experience behind them, that brings credibility to the whole project in my book. Even though their writing proposal skills could be polished a bit I don't have any doubt about their technical prowes.\nAs far as I can see there's a good roadmap that has a decent timetable to coplete what seem to be the initial steps of their idea and if they are funded I'm sure the road ahead will be quite long from what I managed to understand. I like the clear milestones and the open source github that would enable people like me to follow the project implementation and possibly learn quite a lot from the project development. The budget rates and timetable is reasonable and it's in between the recommended pricepoints so no complaints from me.\nThe proposal is techically feasible and I believe as a dev myself that the estimations seem reasonable considering the large amount of testing that needs to be done for a stable and successfull implementation.\nThe proposers have considered the greatest challenge for any opensource project \"will it be adopted?\" and have somewhat optimistic view, but even considering that question is enough to persuade me they're headed on the right path. Overall a feasible proposal that has a place among the best of the proposals I've seen (idea wise atleast).\n", "q1r": 5, "q2": "Not much to say here, because it's an open source projet can be followed by anyone with an internet connection and the proposers have prpomised a detailed roadmap to be presented as part of the opensource repository to make things even easier to understand. The problem statement is clear, but I couldn't say the solution statement is clear at least if you don't google the things you don't understand for 20 minutes in my case. Even so the metrics and KPIs provided are reasonable, building a dapp is straightforward and deterministic from an audit stanedpoint and overall an auditable proposal.\nI'd suggest to the proposers to work on their \"simplifying technical terminology into understandable sentances\" skills and wish them good luck and good job for the great proposal. I would also like to thank them, because I learned a lot while googling.\n", "q2r": 5, "assessor": "z_assessor_2463", "no_vca": 9, "ne": 5, "ng": 4, "nfo": 0, "vca_o": 2}, {"id": 3301, "q0": "While I have enjoyed assessing the progress of projects working at the level of large enterprise DSLs, my heart always returns to languages like Python and Rust as the integrations that most suit the decentralized future where SMEs abound.  These smaller business and projects will need to lean into opensource client libraries, and this project aims to continue work already begun to continue building on a foundation for an eventual Cardano Rust node.\n\nThis funding is for the development of the interpreter for Plutus Core (allowing for eventual replacement of things like PlutusTx), and if you follow the Aiken gits (and also look at Oura and Pallas to see these principles of small footprints and speed) you see a modular approach that will empower developers to grab tools as needed for their toolset, while supporting well documented integration of a whole-chain toolset if desired.\n\nIn the end, what is getting built out here is a faster, less resource intensive, far more accessible path to smartcontracts.  An underrated aspect that will become more and more important is what looks like a self-verification angle being taken with the modules.  The team does suggest in a few places the ability to statically analyze code, or to increase security of the contracts, and I think this self-verification (prob. via the compiler?) is where they are heading.  Proofs for smart contracts (the ability to add some game theory logic to this would be killer) are going to be considered an essential characteristic from now on, so this is a tool that will likely be able to fall under the umbrella of future certification standards.  A huge factor in my opinion, but extremly difficult to do with UPCL.  Also underrated is their intention to deliver an SDK, which can be a major accessibility help for a lot of developers, as well as future plans for a full client library to go with Aiken.\n\nBecause this project will be adding high level functionality, security and accessibility to the ecosystem, especially if they deliver on Rust composability and portability I believe it warrants a full 5 stars for Impact.", "q0r": 5, "q1": "The team behind this have been creating Rust implementations for Cardano that are more than just integrations, but modules that leverage what Rust does best.  A great example is Oura whose Watch and Daemon protocol (https://txpipe.github.io/oura/usage/daemon.html) allow low resource users to fill in gaps that IOGs db-sync misses, such as accessing pipeline data.  Their gits are extremely active with growing community support and popular repos (over 50 forks in the last 6 months).\n\nThe milestones they have laid out describe a clear 4 month funding timeline (and one of the first deliverables for the project is a detailed roadmap in the github PM), with specific roles and deliverables for each milestone.  Likewise the budget is straightforward, with reasonable hourly rates for both developers and documentation, and total hours calculated.  I will mention to the proposer that it can be useful for this format to either correlate the budget to the milestones or timeline as well, or to correlate a breakdown of the required hours to the milestones, to give an idea of how well aligned these 3 factors are.  I'm not marking down for this (as the info, technically, is all there), but it is very helpful when it is arranged as I have described.\n\nBecause the team is highly qualified in Rust and has a proven track record, and because the provided milestones and budget are detailed with clear deliverables, I believe this proposal is highly likely to be implemented and deserves a full 5 star rating for Feasibility", "q1r": 5, "q2": "The team has an interesting way of approaching the milestones in terms of auditability.  Each milestone (and each one consists of 4-5 deliverables) is treated as a versioned repo, updated with each deliverable (and with a sprint burndown tool it could be iterated even more...for example a v1.2.50, which might be the first milestone with 2 deliverables finished and half of deliverable 3 finished).  Because of their modular approach (and this is really brilliant, IMO, though I think a lot of developers do this implicitly) each milestone is basically set up to be a functional release.  This is a clear, highly auditable format that will make for easy reporting and at-a-glance progress updates.\n\nFurther, the team is very active in their gits, and with the growing community interaction and attention to the projects, as well as collaboration with major projects like jpg.store, I feel they will continue to be accessible and transparent with the community.\n\nBecause they have a clear protocol for analyzing and measuring progress, and because the deliverables are concrete and well defined, I believe this team has presented a proposal that the community can track with ease.  5 Stars for auditability.", "q2r": 5, "assessor": "z_assessor_2436", "no_vca": 6, "ne": 3, "ng": 3, "nfo": 0, "vca_o": 1}, {"id": 4314, "q0": "I love technical projects on the Cardano blockchain, your project makes me curious, and I want to know how it is. offer Aiken: Smart Contract Toolchain Presenting the problem for programmers who have access to Haskell and Plutus, these are unfamiliar and confusing languages to them. This proposal is aimed at developers on the Cardano blockchain who contribute to the proliferation of dApps in the Cardano ecosystem. Regarding the solution, the proposer gives the following succinct content: \u201cPort UPLC to Rust (mostly done) Implement the interpreter (own the full toolchain!) Create a high-level C-family language with functional semantics UPLC static analysis tools Robust testing tools\u201d Really if you are not a working person or have a background in technology, it will be very difficult to understand the content in this proposal. To solve the problem, they use the C programming language, which is a short, low-level programming language associated with machine language and has the power to handle the platforms under the backend of the systems. specific embedded systems as they explain: \u201cInstead of approaching this from the top, we decided to work from the bottom up. So far, we've moved our Untyped Plutus Core implementation from Haskell to Rust. Next is the interpreter for Untyped Plutus Core. This work is not only useful for building a full Cardano node in Rust but also allows Aiken to have a fully compiled toolchain for Cardano smart contracts.\u201d As a programmer, I think this approach is smart and controls the system risk incurred when compiling it. If this Aiken is built as a module tied to Cardano and allows Rust programming to work, this will expand and attract many development communities on other blockchain platforms to participate. I completely agree with this project's problem solving and the Aiken tool developers are on the right track.", "q0r": 5, "q1": "With a very succinct roadmap as they present, the Aiken tool is planned in 3 phases, each developing for 1-2 months for jobs: \u201cMilestone #1: PoC Untyped Plutus Core Interpreter basic High-level language syntax designed and parsed Type checking the high-level language Milestone #2: Features final syntax and standard library testing utilities Milestone #3: Hardening / Documentation Deliverables Fully-Functional v1 Performance optimizations Bug-fixing Documentation site\u201d With the total required project budget of $111480, a fair amount to develop a Cardano community service tool like Aiken. There are also very brief budget expenditures that have not been detailed in many parts. \u201cHourly rates: Rust Developer: 75 usd/hs Technical Writer: 36 usd/hs Required Hours: Rust Developers: 1400 hs Technical Writer: 180 students\u201d I don't appreciate the cost budget they give, it doesn't show the respective jobs and expenses. About the development team, they are good engineers as presented which is a small team of seasoned developers passionate about Open Source and Cardano. It is the team behind existing projects such as Oura & Pallas, which specializes in backend development, data pipelines, cloud architecture, and compilers. Rust is our language of choice. They are the right people to develop this proposal, I can see their working histories.\n\u201cLucas Rosa will lead the software development. https://github.com/rvcas https://twitter.com/rvcas Kasey White co-leading the software development https://github.com/MicroProofs https://twitter.com/MicroProofs\u201d These are engineers who have the ability to work and execute their ideas well.", "q1r": 4, "q2": "In this section, they present very modest but informative enough for us Cardano community to follow the progress of their work. I went to https://github.com/txpipe/aiken, a lot of sources have been submitted, and they are working on a great tool like Aiken. They will build Aiken as a platform for many dApps on Cardano to grow and create the next breakthrough for Cardano. In addition to tracking the source code posted on GitHub (part of the open source repository), the project's tracking metrics are given by them: \u201cEach milestone will be presented as a partial but working \"release\" within the repository Milestone and tasks will be tracked via Github using their project management tool. Direct communication with the development team will be able through TxPipe's Discord server. Weekly update summaries will be posted via TxPipe's Twitter account.\u201d I support this proposal as an attempt to develop tools on Cardano, however as a programmer I think the project has some major challenges. The first is the difficulty of converting from Plutus to rust because the browser indexes are difficult to handle, and the second is the difficulty of verifying all of GHC Core, let alone the converter to Plutus IR. Finally, good luck with your project and I look forward to it too.", "q2r": 5, "assessor": "z_assessor_2544", "no_vca": 5, "ne": 1, "ng": 4, "nfo": 0, "vca_o": 1}, {"id": 7828, "q0": "The proposal contains measures and strategies that effectively addresses the challenge. The idea of porting Haskell to Rust is quite refreshing. Additionally, the team intends to introduce static analysis in the ecosystem so as to improve the security of smart contracts. All these innovations will certainly attract more developers to build on the Cardano ecosystem. For this reason I gave the proposal a 5 star rating.", "q0r": 5, "q1": "The experience of the team behind the proposal is relevant to finding a solution to the challenge. Their vast knowledge in backend development, cloud architecture and data pipeline will help in the successful implementation of the proposal. The plan to bring on board a familiar syntax used by most up and coming developers is a welcoming news. The proposal also plans on introducing an integration tool chain with the aim of attracting more developers. For these reasons I gave the proposal a 5 star rating.", "q1r": 5, "q2": "I gave the proposal a 5 star rating and my reasons are as follows; \nThe team intends to use the GitHub project management tool to track progress of the project. Additionally, they stated that they will be using their Txpipe Discord server as well as their Twitter account to give weekly updates of the successes and progress of the project. With these avenues, the catalyst community will be able to easily audit the progress and success of the project. ", "q2r": 5, "assessor": "z_assessor_2924", "no_vca": 4, "ne": 0, "ng": 3, "nfo": 1, "vca_o": 1}, {"id": 8812, "q0": "The proposal identifies with the challenge goal by creating an alternative option for developers to write smart contracts in Cardano.The proposal calls out that Haskell based Plutus is unfamiliar to most developers. Creating a toolchain in Rust can certainly help the dev community who prefer to code in Rust. It is commendable that tht team is proposing to build the entire toolchain. IOG has taken quite a while to build the Plutus based toolchain. A downside I  see at the same time is the POC component.The proposal does not describe the impact if the 1 month POC fails. In the case if the POC fails and the project halts the investment on the project will not be fruitful.The overall impact will be low and it will fail to address the goals of the challenge. It is pertinent to note that the total budget requested is slightly more than the 11% of the total budget.Given that the POC is just 1 out of the 3 milestones,I would have liked to see the POC alone to be a proposal with lower budget and after the POC becomes successful further work to be funded with a future round of catalyst.I encourage the team and do not mean to undermine their expertise. However given the large percent of budget compared to the total challenge budget the opportunity cost to other proposals may be high if the POC(3 month long) is not successful.For that reason my rating is only 3 star. The team identifies the risk that the new language may not receive more adoption than Plutus.It is promising to know that they have gotten good feedback from the community so far.", "q0r": 3, "q1": "The timeline has been spread across 3 sections. The total development effort can be summed up to be 11 months. However the team has not indicated the timeframe in terms of an exact month/quarter for delivery for the development for any of the components. I would have liked to see the indicative timeline to include months/quarter delivery of different stages. A key component that determines the success of this toolchain will be its deployment models.The proposal does not tell the new language to build smart contracts that can be deployed. Aside from the POC the deliverables are finalized libraries,testing utilities ,optimisations and documentation. Having a library for writing smart contracts in a language other than Plutus would be good but it still can not be used if the smart contracts cannot be deployed in a cardano node based environment. For example, Plutus smart contracts work on the PAB (along with chain index) giving it means to be deployed and executed.The feasibility of their proposal would have been clear if it also contained details about how the smart contracts can be deployed and how it intersects with the Cardano node and other components. For a technical proposal of such a budget requirement, these details are essential in my view.", "q1r": 1, "q2": "The auditability looks really good given its an open source repository.Working releases for milestones ,communication channel on discord to interact with the dev team and weekly updates of Twitter as mentioned in the proposal are great ways for the community to track progress. I therefore rate the auditability dimension a 5 star.", "q2r": 5, "assessor": "z_assessor_3007", "no_vca": 5, "ne": 0, "ng": 3, "nfo": 2, "vca_o": 1}], "solution": "\nPort UPLC to Rust (mostly done)\nImplement the interpreter (own the full toolchain!)\nCreate a high level C-family language with functional semantics\nUPLC static analysis tools\nRobust testing tools\n", "experience": "We're TxPipe, a small team of seasoned developers passionate about Open Source and Cardano. It is the team behind existing projects such as Oura & Pallas. We specialize in backend development, data pipelines, cloud architecture, and compilers. Rust is our language of choice."}